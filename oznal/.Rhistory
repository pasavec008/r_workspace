summary(model_train)
summary(model_test)
data <- read.csv('../data/Default.csv')
library(tidyverse)
library(ggplot2)
library(dplyr)
library(magrittr)
data <- read.csv('../data/Default.csv')
data
ggplot(data = data, mapping = aes(x = balance)) +
geom_histogram()
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram()
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(alpha=0.6)
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(y = ..density.., alpha=0.6)
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.6)
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.6) +
geom_density()
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(alpha=0.6) +
geom_density()
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.6)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.6)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.2)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.2)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
histogram(data[data$default == 'yes']$default)
histplot(data[data$default == 'yes']$default)
hist(data[data$default == 'yes']$default)
hist(data[data$default == 'yes']$balance)
hist(data$balance[data$default == 'yes'])
data[data$default == 'yes']
data[data$default == 'Yes']
data
data[data$default == 'Yes',]
data[data$default == 'Yes',]$balance
hist(data[data$default == 'Yes',]$balance)
hist(data[data$default == 'No',]$balance)
hist(data[data$default == 'Yes',]$balance)
hist(data[data$default == 'No',]$balance)
hist(data[data$default == 'Yes',]$balance)
hist(data[data$default == 'No',]$balance)
hist(data[data$default == 'Yes',]$balance, breaks = 10)
hist(data[data$default == 'Yes',]$balance, breaks = 100)
hist(data[data$default == 'Yes',]$balance, breaks = 50)
hist(data[data$default == 'Yes',]$balance, breaks = 50, col = 'red', alpha = 0.5)
hist(data[data$default == 'Yes',]$balance, breaks = 50, col = 'red')
par(mfrow =c(1,2))
hist(data[data$default == 'Yes',]$balance, breaks = 50, col = 'red')
hist(data[data$default == 'No',]$balance)
hist(data[data$default == 'No',]$balance, breaks = 50)
hist(data[data$default == 'Yes',]$balance, breaks = 50)
hist(data[data$default == 'Yes',]$balance, breaks = 50)
hist(data[data$default == 'No',]$balance, breaks = 50)
data
data$default <- ifelse(data$default == 'No', 0, 1)
data$student <- ifelse(data$student == 'No', 0, 1)
data
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
data
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
data$default <- as.factor(ifelse(data$default == 'No', 0, 1))
data$student <- as.factor(ifelse(data$student == 'No', 0, 1))
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
data <- read.csv('../data/Default.csv')
data
data$default <- as.factor(ifelse(data$default == 'No', 0, 1))
data$student <- as.factor(ifelse(data$student == 'No', 0, 1))
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
qqnorm(data[data$default == 'Yes',]$balance)
qqplot(data[data$default == 'Yes',]$balance)
qqnorm(data[data$default == 'Yes',]$balance)
qqnorm(data[data$default == 1,]$balance)
qqline()
qqline(data[data$default == 1,]$balance)
qqnorm(data[data$default == 0,]$balance)
qqline(data[data$default == 0,]$balance)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
mean(data[data$default == 0,]$balance)
mean(data[data$default == 1,]$balance)
library(MASS)
model <- lda(default ~ balance, data)
summary(model)
model
model
predict(model, data)
lda_predict <- predict(model)
lda_predict
lda_predict$class
library(caret)
confusionMatrix(lda_predict$class, data$default, positive = '1')
c <- confusionMatrix(lda_predict$class, data$default, positive = 1)
c <- confusionMatrix(lda_predict$class, data$default, positive = '0')
c
c$table
lda_matrix <- confusionMatrix(lda_predict$class, data$default)
lda_matrix$table
glm(default ~ balance, data = data)
data
glm(default ~ balance, data = data, family = 'binomial')
model_logistic <- glm(default ~ balance, data = data, family = 'binomial')
predict(model_logistic, data)
predict(model_logistic)
predict(model_logistic)$fitted_values
model_logistic$fitted.values
ifelse(model_logistic$fitted.values < 0.5, 0, 1)
glm_predict <- ifelse(model_logistic$fitted.values < 0.5, 0, 1)
glm_matrix <- confusionMatrix(glm_predict, data$default)
glm_matrix <- confusionMatrix(as.factor(glm_predict), data$default)
glm_matrix$table
lda_table
lda_matrix$table
library(ROCit)
install.packages('ROCit')
library(ROCit)
model_logistic$y
roc <- rocit(class = model_logistic$y,
score = model_logistic$fitted.values)
roc
summary(roc)
roc2 <- rocit(class = model$y,
score = model$fitted.values)
model
model$fitted.values
lda_predict$class
lda_predict
model_logistic$fitted.values
roc2 <- rocit(class = model$y,
score = lda_predict)
lda_predict
model$y
model_logistic$y
roc2 <- rocit(class = lda_predict$class,
score = lda_predict)
lda_predict$class
model_logistic$y
da_predict
lda_predict
lda_predict$class
roc <- rocit(class = model_logistic$y,
score = model_logistic$fitted.values)
summary(roc)
source("D:/skola2022_2023/1letny/r_workspace/oznal/cv7_1_2.R", echo=TRUE)
glm_matrix$table
glm_predict <- ifelse(model_logistic$fitted.values < 0.948, 0, 1)
glm_matrix <- confusionMatrix(as.factor(glm_predict), data$default)
glm_matrix$table
glm_predict <- ifelse(model_logistic$fitted.values < 0.947, 0, 1)
glm_matrix <- confusionMatrix(as.factor(glm_predict), data$default)
glm_matrix$table
roc <- rocit(class = model_logistic$y,
score = model_logistic$fitted.values)
summary(roc)
roc$Cutoff
summary(roc)
roc <- rocit(class = lda_predict$class,
score = data$default)
data
data$default
roc <- rocit(class = lda_predict$class,
score = data$default)
roc <- rocit(class = lda_predict$class,
score = as.integer(data$default))
roc <- rocit(class = model_logistic$y,
score = model_logistic$fitted.values)
roc2 <- rocit(class = lda_predict$class,
score = as.integer(data$default))
summary(roc)
summary(roc2)
library(latex2pdf)
install.packages(latex2pdf)
install.packages('latex2pdf')
library(latex2pdf)
library(latex2pdf)
library('latex2pdf)
library('latex2pdf')
library('latex2pdf')
library('latexspdf')
library('latexpdf')
install.packages('latexpdf')
library('latexpdf')
help(magrittr)
help(dplyr)
browseVignettes(package = "dplyr")
read_xls('../data')
# subset
data[data$student = 1,]$student
# load data
data <- read.csv('../data/Default.csv')
data
# add ID to data using length
data$ID <- 1:length(data$default)
data
data %<>% select(ID, everything())
data %<>% select(ID, everything())
data
# Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
# confusion matrix
library(caret)
# for lda() - linear discriminant analysis
library(MASS)
# for ROC - Area under curve is only important thing
library(ROCit)
data %<>% select(ID, everything())
# add ID to data using length and move ID column as first
data$ID <- 1:length(data$default)
data %<>% select(ID, everything())
# Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
# confusion matrix
library(caret)
# for lda() - linear discriminant analysis
library(MASS)
# for ROC - Area under curve is only important thing
library(ROCit)
data %<>% select(ID, everything())
data
data %<>% select(ID, everything())
data %>% select(ID, everything())
data %>% select(ID)
library(magrittr) #pipes
library(dplyr) #pipes
data %>% select(ID)
data
# load data
data <- read.csv('../data/Default.csv')
data %>% select(ID)
library(dplyr) #pipes
# load data
data <- read.csv('../data/Default.csv')
data %>% select(ID)
# add ID to data using length and move ID column as first
data$ID <- 1:length(data$default)
data %>% select(ID)
data %>% select('ID')
data %>% select(data.ID)
data %>% select(data$ID)
data %>% select(income)
data
data$ID
# predict data with model (data must have same structure [best to use train/test sets])
kk <- cric[1:3,]
cric <- modeldata::crickets
# Ordinary Linear Regression (OLR)
model <- lm(rate ~ temp + species, cric)
summary(model)
# predict data with model (data must have same structure [best to use train/test sets])
kk <- cric[1:3,]
kk %<>% select(!rate)
### Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
# confusion matrix
library(caret)
# for lda() - linear discriminant analysis
library(MASS)
# for ROC - Area under curve is only important thing
library(ROCit)
kk %<>% select(!rate)
kk %<>% select(rate)
kk
kk %>% select(rate)
kk %>% select(species, temp, rate)
library(dplyr) #pipes
cric <- modeldata::crickets
# predict data with model (data must have same structure [best to use train/test sets])
kk <- cric[1:3,]
kk %>% select(species, temp, rate)
# Ordinary Linear Regression (OLR)
model <- lm(rate ~ temp + species, cric)
# predict data with model (data must have same structure [best to use train/test sets])
kk <- cric[1:3,]
kk %<>% select(!rate)
library(magrittr) #pipes
kk %<>% select(!rate)
kk
predict(model, kk)
# plot model
autoplot(model)
# for autoplot of model
library(ggfortify)
# plot model
autoplot(model)
pair(model)
# Plots
library(ggplot2)
### Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
pair(model)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
pair(model)
pairs(model)
### Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
# confusion matrix
library(caret)
# confusion matrix
install.packages('caret')
# confusion matrix
library(caret)
# for autoplot of model
library(ggfortify)
# confusion matrix
library(caret)
# for lda() - linear discriminant analysis
library(MASS)
# for ROC - Area under curve is only important thing
library(ROCit)
install.packages('ROCit')
# for ROC - Area under curve is only important thing
library(ROCit)
crickets
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr) #pipes
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr)
library(dplyr)
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
data <- crickets
pairs(data)
data
cor(data)
data$species <- ifelse(data$species == 'O. exclamationis', 1, 0)
cor(data)
data <- crickets
data$species
data$species <- ifelse(data$species == 'O. exclamationis', 1, 0)
cor(data)
### Plots
# Plot for dependency of 2 variables divided by color according to their classes
ggplot(modeldata::crickets, aes(x = temp, y = rate, color = species)) +
geom_point() +
geom_smooth()
### Plots
# Plot for dependency of 2 variables divided by color according to their classes
ggplot(data, aes(x = temp, y = rate, color = species)) +
geom_point() +
geom_smooth()
### Plots
# Plot for dependency of 2 variables divided by color according to their classes
ggplot(modeldata::crickets, aes(x = temp, y = rate, color = species)) +
geom_point() +
geom_smooth()
hist(crickets$temp)
hist(crickets$temp, breaks = 50)
hist(crickets$temp, breaks = 30)
hist(crickets$temp, breaks = 10)
hist(crickets$temp, breaks = 7)
hist(crickets$rate)
hist(crickets$species)
hist(as.integer(crickets$species))
hist(data$species)
hist(data$species)
glm()
model <- glm(species~rate + temp, data)
model <- glm(species~rate + temp, data, family('binomial'))
model <- glm(species~rate + temp, data, family = 'binomial')
model
summary(model)
mm <- lm(rate~temp, data)
mm
summary(mm)
summary(model)
predict(model)
predict(model, type = 'response')
fitted <- predict(model, type = 'response')
fitted.values()
summary(model)
model <- glm(species~rate + temp, crickets, family = 'binomial')
summary(model)
model <- glm(species~rate + temp, data, family = 'binomial')
summary(model)
model <- glm(species~rate : temp, data, family = 'binomial')
summary(model)
### Plots
# Plot for dependency of 2 variables divided by color according to their classes
ggplot(modeldata::crickets, aes(x = temp, y = rate, color = species)) +
geom_point() +
geom_smooth()
model <- glm(species~rate + temp, data, family = 'binomial')
summary(model)
### Plots
# Plot for dependency of 2 variables divided by color according to their classes
ggplot(modeldata::crickets, aes(x = temp, y = rate)) +
geom_point() +
geom_smooth()
### Plots
# Plot for dependency of 2 variables divided by color according to their classes
ggplot(modeldata::crickets, aes(x = temp, y = rate, color = species)) +
geom_point() +
geom_smooth()
model <- glm(species~rate + temp, data, family = 'binomial')
summary(model)
model <- glm(species~rate : temp, data, family = 'binomial')
summary(model)
data
summary(model)
model <- glm(species~temp : rate, data, family = 'binomial')
summary(model)
model <- glm(species~rate * temp, data, family = 'binomial')
summary(model)
model <- glm(species~rate : temp, data, family = 'binomial')
summary(model)
model <- glm(species~rate, data, family = 'binomial')
summary(model)
summary(model)
model <- glm(species~ rate, data, family = 'binomial')
summary(model)
model <- glm(species~rate+temp, data, family = 'binomial')
summary(model)
model <- glm(species~temp + rate, data, family = 'binomial')
model <- glm(species~rate, data, family = 'binomial')
summary(model)
prediction <- predict(model, type = 'response')
data$prediction <- ifelse(prediction > 0.5, 1, 0)
data
confusionMatrix(data$prediction, data$species)
confusionMatrix(as.factor(data$prediction), as.factor(data$species))
confusionMatrix(as.factor(data$prediction), as.factor(data$species))$table
model2 <- glm(species~rate:temp, data, family = 'binomial')
summary(model2)
prediction2 <- predict(model2, type = 'response')
data$prediction2 <- ifelse(prediction2 > 0.5, 1, 0)
help(confusionMatrix)
confusionMatrix(as.factor(data$prediction2), as.factor(data$species))$table
confusionMatrix(as.factor(data$prediction), as.factor(data$species))$table
model3 <- lda()
confusionMatrix(as.factor(data$prediction), as.factor(data$species))$table
confusionMatrix(as.factor(data$prediction2), as.factor(data$species))$table
model3 <- lda(species~rate, data)
summary(model3)
predict(model3)
predicted <- predict(model3)
predicted$posterior
predicted$class
data$prediction3 <- predicted$class
data
confusionMatrix(as.factor(data$prediction3), as.factor(data$species))
confusionMatrix(as.factor(data$prediction), as.factor(data$species))$table
confusionMatrix(as.factor(data$prediction2), as.factor(data$species))$table
confusionMatrix(as.factor(data$prediction3), as.factor(data$species))$table
library(ROCit)
rocit(class = data$prediction, score = data$species)
k <- rocit(class = data$prediction, score = data$species)
k$AUC
rocit(class = data$prediction, score = data$species)$AUC
rocit(class = data$prediction2, score = data$species)$AUC
rocit(class = data$prediction3, score = data$species)$AUC
